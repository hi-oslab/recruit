/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'

export const Gameboy = (props) => {
  const { nodes, materials } = useGLTF('/glb/gamboy.glb')

  const textureRef = useRef(null)

  useEffect(() => {
    const loader = new THREE.TextureLoader()
    loader.load('/img/screen.png', (texture: THREE.Texture | undefined) => {
      texture.flipY = true // Y축을 뒤집지 않도록 설정
      texture.rotation = -Math.PI / 2 // 90도 회전 (왼쪽으로 회전)
      texture.center.set(0.5, 0.5) // 회전의 중심을 텍스처의 중앙으로 설정
      textureRef.current.map = texture
      textureRef.current.needsUpdate = true
    })
  }, [])

  return (
    <group {...props} dispose={null}>
      <group
        position={[-1.29061818, 1.04919004, 4.34618759]}
        rotation={[-1.80022313, -0.15804641, -0.67037583]}
        scale={0.00030749}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh001.geometry} material={materials['dbl_Groeperen#3_001']} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh001_1.geometry}
          material={materials['dbl_Groeperen#3_002']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh001_2.geometry}
          material={materials['dbl_Groeperen#3_003']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh001_3.geometry}
          material={materials['dbl_Groeperen#3_004']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh001_4.geometry}
          material={materials['dbl_Groeperen#3_005']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh001_5.geometry}
          material={materials['dbl_Groeperen#3_006']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh001_6.geometry}
          material={materials['dbl_Groeperen#3_007']}
        />
      </group>
      <group
        position={[-1.57812119, -2.94521713, 6.54145527]}
        rotation={[0.52516959, -0.44406829, 0.54150312]}
        scale={0.00030749}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh.geometry} material={materials['dbl_Groeperen#5_001']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_1.geometry} material={materials['dbl_Groeperen#5_002']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_2.geometry} material={materials['dbl_Groeperen#5_003']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_3.geometry} material={materials['dbl_Groeperen#5_004']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_4.geometry} material={materials['dbl_Groeperen#5_005']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_5.geometry} material={materials['dbl_Groeperen#5_006']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_6.geometry} material={materials['dbl_Groeperen#5_007']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_7.geometry} material={materials['dbl_Groeperen#5_008']} />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane001.geometry}
        position={[-0.15355562, 0.17739691, 5.34302998]}
        rotation={[-0.41590891, 0.88764148, 1.82697941]}
        scale={[0.94524378, 0.98443139, -1.00940073]} // z축을 음수로 설정
      >
        <meshBasicMaterial
          ref={textureRef}
          attach='material'
          transparent={true} // 투명도 활성화
          color={new THREE.Color(0x570054)} // 색상 조정 (기본 색상에 약간 붉은 톤 추가)
          opacity={0.8} // 투명도 조정 (값을 낮추면 더 진해짐)
        />
      </mesh>
    </group>
  )
}

useGLTF.preload('/glb/gamboy.glb')
