/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cube003: THREE.Mesh
    Cube003_1: THREE.Mesh
    Cube003_2: THREE.Mesh
    Cube003_3: THREE.Mesh
  }
  materials: {
    ['Material.004']: THREE.MeshStandardMaterial
    ['Material.012']: THREE.MeshStandardMaterial
    ['Material.010']: THREE.MeshStandardMaterial
    ['Brushed Metal']: THREE.MeshStandardMaterial
  }
}

export function Neck(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/glb/neck.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group position={[0, 3.328, -0.953]} rotation={[-0.114, 0, 0]} scale={[0.399, 0.269, 0.213]}>
        <mesh castShadow receiveShadow geometry={nodes.Cube003.geometry} material={materials['Material.004']} />
        <mesh castShadow receiveShadow geometry={nodes.Cube003_1.geometry} material={materials['Material.012']} />
        <mesh castShadow receiveShadow geometry={nodes.Cube003_2.geometry} material={materials['Material.010']} />
        <mesh castShadow receiveShadow geometry={nodes.Cube003_3.geometry} material={materials['Brushed Metal']} />
      </group>
    </group>
  )
}

useGLTF.preload('/glb/neck.glb')
